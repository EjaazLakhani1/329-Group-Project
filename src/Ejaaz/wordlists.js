export const wordlists = "Wordlists are a collection of words stored as plaintext in a file. They are commonly used for password cracking and thus most wordlists are comprised of commonly used passwords or phrases. The most common/known wordlist is rockyou.txt which is a insanely large file consisiting of over 14 million words used accross roughly 33 million accounts according to kaggle (https://www.kaggle.com/datasets/wjburns/common-password-list-rockyoutxt). Another commonly used collection of wordlists are seclists. The collection of SecLists wordlists are even greater as they go beyond just passwords and also include usernames, webshells, payloads etc. (Note: for the scope of this lesson we wont go beyond passwrods.) The collection of SecLists password wordlists can be found here (https://github.com/danielmiessler/SecLists/tree/master/Passwords)"

export const hashcat = "Hashcat is an opensource password cracking tool. Hascat is very fast, efficient and versatile as it uses brute force to match a word to a target hash. Hashcat can be downloaded from the following git repo (https://github.com/hashcat/hashcat) which includes download and setup instructions in the ReadME file. \n \nYou can run the hashcat command like: hashcat -a 0 -m <hash type> <hash file> <wordlist> \ \nwhere \n \n-a flag represents the attack mode. This is the type of attack we wish to run on our target hash. Some of the most common types are Dictionary Attacks, Combination Attacks and Mask Attacks. (We will get more into these in the Cracking Hashses section). \n \n-m flag represents the hash type. Hashes can come in various types some of the more common being MD5 and SHA256, but there are hundereds more. We will discuss hash types more in the next section along with how we can identify hash types. \n \n<hash file> is the file we store our hash in. \n \n<wordlist> is the path to our wordlist we are using"

export const hashes = "Hashes are often stored using a certain format. such as hash:salt or $id$salt$hash \n \nHashid is a Python tool, which can be used to detect various kinds of hashes. You can use this via command line or even supply a file with multiple hashes \n \n hashid '8743b52063cd84097a65d1633f5c74f5' \n \nhashid filename \n \n You can also add the -m flag to tell hashid to output the hash mode. \n \n hashid '8743b52063cd84097a65d1633f5c74f5' -m \n \nAdditionally hashcat provides an amazing reference to various hashtypes and certain patterns/formats you can look for when identifying hashes. (https://hashcat.net/wiki/doku.php?id=example_hashes)"

const crackingHashes1 = "Cracking hashes, while an interesting skill should be done with caution. It is important that before we discuss how to crack hashes that you know to always use this tool responsibly. One should only use this tool in environments/on hashes where they are allowed to crack the hash. For example all hashes you will be shown in this section as well as this sections CTF are permitted for you to use the hashcat tool on. Finding a random users password hash on a server is not permitted.\n \nNow that we have seen how to identify hash types lets discuss more about attack modes. We will be discussing 3 different attack modes which are Dictionary Attacks, Combination Attacks and Mask Attacks. (We will get more into these in the Cracking Hashses section). \n \nDictionary Attacks are the most straightforward but extremely effective attack type is the dictionary attack.\n \nYou can run a dictionary attack with the following command \n \n    hashcat -a 0 -m <hash type> <hash file> <wordlist> \n \nHere we are using attack mode 0 which specifies a dictionary attack. Dictionary attacks are particularly useful for weaker passwords (password, 12345 etc.) It is also helpful if you want to quickly run through basic cracking attempt to rule out weak passwords. \n \n \nThe combination attack modes take in two wordlists as input and create combinations from them. This attack is useful because it is not uncommon for users to join two or more words together, thinking that this creates a stronger password, i.e., hellothere or passwordcracking.\n \nYou can run a combination attack with the following command \n \n    hashcat -a 1 -m <hash type> <hash file> <wordlist1> <wordlist2> \n \nHere we are using attack mode 1 which specifies a combination attack. When using a combination attack the 2 wordlists may be the same wordlist. There is no requirement that you have to specify 2 different wordlists."

const crackingHashes2 = "\n \n \nMask attacks are used to generate words matching a specific pattern. This type of attack is particularly useful when the password length or format is known. A mask can be created using static characters, ranges of characters (e.g. [a-z] or [A-Z0-9]), or placeholders. The following list shows some important placeholders:\n \n    ?l    lower-case ASCII letters (a-z)\n \n    ?u upper-case ASCII letters (A-Z) \n \n    ?d    digits (0-9)\n \n    ?s    special characters\n \nSuppose the password had the following pattern, username followed by a 4 letter word (lowercase) followed by a 4 ltter year. Then for user Ejaaz, you can run a mask attack with the following command \n \n    hashcat -a 3 -m <hash type> <hash file> 'Ejaaz?l?l?l?l?d?d?d?d \n \nHere we are using attack mode 3 which specifies a dictionary attack. Notice that when using a mask attack, we dont specify any wordlist. This is because we are simply bruteforcing against a known pattern and thus a wordlist is unneccisary. You can learn more about character rules here (https://hashcat.net/wiki/doku.php?id=mask_attack) \n \n"

export const crackingHashes = crackingHashes1 + crackingHashes2